---
import { Image } from "astro:assets";
import Layouts from "@layouts/Layouts.astro";
import { RegisterEvent, RelatedStories } from "@components/resources";

import { getEvents } from "@utils/prismic";
import { isDatePast, formatDate } from "@utils/functions";
import { PrismicText } from "@components/utils";

export async function getStaticPaths() {
  const eventsApiData = await getEvents({
    pageSize: 100,
  });

  return eventsApiData.results.map((event) => {
    return {
      params: { event: event?.uid },
      props: {
        event: {
          id: event.id,
          uid: event.uid,
          type: event?.data?.type,
          platform: event?.data?.platform,
          image: event?.data?.webinar_image,
          description: event.data?.description,
          speakers: event?.data?.speakers || [],
          video: event?.data?.webinar_video?.url,
          title: event?.data?.webinar_title?.[0].text,
          register_link: event?.data?.register_link?.url,
          isPast: isDatePast(event?.data?.start_date_time),
          endDate: formatDate("DD MMMM, YYYY", event?.data?.end_date_time),
          startDate: formatDate("DD MMMM, YYYY", event?.data?.start_date_time),
          startTime: formatDate(
            "h:mm A",
            new Date(event?.data?.start_date_time).getTime()
          ),
          endTime: formatDate(
            "h:mm A",
            new Date(event?.data?.end_date_time).getTime()
          ),
        },
        relatedEvents: eventsApiData.results
          .filter((e) => e.uid !== event.uid)
          .slice(0, 3)
          .map((e) => ({
            id: e.id,
            uid: e.uid,
            type: e?.data?.type,
            platform: e?.data?.platform,
            image: e?.data?.webinar_image,
            speakers: e?.data?.speakers || [],
            video: e?.data?.webinar_video?.url,
            title: e?.data?.webinar_title?.[0].text,
            register_link: e?.data?.register_link?.url,
            description: event.data?.description,
            isPast: isDatePast(e?.data?.start_date_time),
            endDate: formatDate("DD MMMM, YYYY", e?.data?.end_date_time),
            startDate: formatDate("DD MMMM, YYYY", e?.data?.start_date_time),
            startTime: formatDate(
              "h:mm A",
              new Date(e?.data?.start_date_time).getTime()
            ),
            endTime: formatDate(
              "h:mm A",
              new Date(e?.data?.end_date_time).getTime()
            ),
          })),
      },
    };
  });
}

const { event, relatedEvents } = Astro.props;
---

<Layouts
  title={`${event.title} • Events • Resources | Complete Farmer`}
  description="We are providing cutting-edge technological farming protocols and innovations with a unique business model and logistics that are revolutionizing..."
>
  <div class="flex flex-col justify-center items-center space-y-16">
    <div
      class="w-full h-[250px] lg:w-[1040px] sm:h-[400px] lg:h-[500px] md:h-[400px] rounded-md overflow-hidden"
    >
      <Image
        alt={event.title}
        src={event.image.url}
        width={event.image.dimensions.width}
        height={event.image.dimensions.height}
        class="lg:mx-auto w-full h-[270px] md:h-[300px] lg:h-[498px] object-cover"
      />
    </div>

    <div
      class="max-w-7xl lg:mx-auto lg:px-5 lg:hidden block mx-6 sm:mx-12 sm:mb-12"
    >
      <h3
        class="w-full text-xl sm:leading-6 md:text-2xl md:leading-[30px] lg:text-2xl lg:leading-[30px] font-bold text-left text-custom_black-900"
      >
        {event.title}
      </h3>
    </div>

    <div
      class="max-w-7xl lg:mx-auto mx-auto px-4 mb-16 sm:mb-0 sm:px-6 lg:px-0 flex flex-col-reverse lg:flex-row justify-center items-center md:items-start lg:space-x-5 w-full h-full"
    >
      <div
        class="flex flex-col justify-start items-start w-full sm:px-10 sm:my-16 lg:px-0 lg:my-0 lg:w-2/4 mr-auto relative gap-8 md:gap-14"
      >
        <div class="space-y-7">
          <h3
            class="hidden lg:block w-full text-xl sm:text-xl sm:leading-6 md:text-2xl md:leading-[30px] lg:text-2xl lg:leading-[30px] font-bold text-left text-custom_black-900"
          >
            {event.title}
          </h3>
          {
            event.description?.length > 0 && (
              <PrismicText render={event.description} client:only="react" />
            )
          }

          <p class="text-2xl font-bold text-left text-custom_black-900">
            HOSTS
          </p>
          <div class="flex justify-start items-start gap-8 my-4 flex-wrap">
            {
              event?.speakers?.map((speaker) => {
                return (
                  <div class="flex flex-col justify-center items-center flex-grow-0 flex-shrink-0 relative gap-2">
                    <img
                      id="speaker-img"
                      data-name={speaker.text}
                      src={speaker.img || undefined}
                      class="w-28 h-28 relative overflow-hidden rounded-full bg-red-200 bg-cover bg-no-repeat bg-center"
                    />
                    <p class="text-base font-bold text-center text-custom_black-900">
                      {speaker.text.split(",")[0]}
                    </p>
                  </div>
                );
              })
            }
          </div>
        </div>
      </div>

      <div
        class="flex flex-col items-center justify-center w-full my-6 px-3 sm:my-0 lg:py-2 mx-auto rounded-lg lg:w-1/2 lg:mx-auto xl:w-5/12"
      >
        <RegisterEvent data={event} client:only="react" />
      </div>
    </div>
  </div>

  <RelatedStories type="events" title="Related Events" data={relatedEvents} />
</Layouts>

<script>
  // @ts-nocheck
  import { createImageFromInitials } from "@utils/functions.ts";

  const images = document.querySelectorAll("#speaker-img");
  images?.forEach((image) => {
    if (!image.hasAttribute("src")) {
      const name = image.getAttribute("data-name");
      const src = createImageFromInitials(500, name.split(",")[0]);
      image.setAttribute("src", src);
    }
  });
</script>
